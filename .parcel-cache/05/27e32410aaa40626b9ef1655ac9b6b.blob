var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "circular", function () {
  return circular;
});
_parcelHelpers.export(exports, "fromExtent", function () {
  return fromExtent;
});
_parcelHelpers.export(exports, "fromCircle", function () {
  return fromCircle;
});
_parcelHelpers.export(exports, "makeRegular", function () {
  return makeRegular;
});
var _GeometryLayoutJs = require('./GeometryLayout.js');
var _GeometryLayoutJsDefault = _parcelHelpers.interopDefault(_GeometryLayoutJs);
var _GeometryTypeJs = require('./GeometryType.js');
var _GeometryTypeJsDefault = _parcelHelpers.interopDefault(_GeometryTypeJs);
var _LinearRingJs = require('./LinearRing.js');
var _LinearRingJsDefault = _parcelHelpers.interopDefault(_LinearRingJs);
var _PointJs = require('./Point.js');
var _PointJsDefault = _parcelHelpers.interopDefault(_PointJs);
var _SimpleGeometryJs = require('./SimpleGeometry.js');
var _SimpleGeometryJsDefault = _parcelHelpers.interopDefault(_SimpleGeometryJs);
var _flatClosestJs = require('./flat/closest.js');
var _extentJs = require('../extent.js');
var _flatDeflateJs = require('./flat/deflate.js');
var _arrayJs = require('../array.js');
var _flatInteriorpointJs = require('./flat/interiorpoint.js');
var _flatInflateJs = require('./flat/inflate.js');
var _flatIntersectsextentJs = require('./flat/intersectsextent.js');
var _flatOrientJs = require('./flat/orient.js');
var _flatAreaJs = require('./flat/area.js');
var _flatContainsJs = require('./flat/contains.js');
var _mathJs = require('../math.js');
var _flatSimplifyJs = require('./flat/simplify.js');
var _sphereJs = require('../sphere.js');
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
/**
* @classdesc
* Polygon geometry.
*
* @api
*/
var Polygon = /** @class*/
(function (_super) {
  __extends(Polygon, _super);
  /**
  * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
  *     Array of linear rings that define the polygon. The first linear ring of the
  *     array defines the outer-boundary or surface of the polygon. Each subsequent
  *     linear ring defines a hole in the surface of the polygon. A linear ring is
  *     an array of vertices' coordinates where the first coordinate and the last are
  *     equivalent. (For internal use, flat coordinates in combination with
  *     `opt_layout` and `opt_ends` are also accepted.)
  * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
  * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).
  */
  function Polygon(coordinates, opt_layout, opt_ends) {
    var _this = _super.call(this) || this;
    /**
    * @type {Array<number>}
    * @private
    */
    _this.ends_ = [];
    /**
    * @private
    * @type {number}
    */
    _this.flatInteriorPointRevision_ = -1;
    /**
    * @private
    * @type {import("../coordinate.js").Coordinate}
    */
    _this.flatInteriorPoint_ = null;
    /**
    * @private
    * @type {number}
    */
    _this.maxDelta_ = -1;
    /**
    * @private
    * @type {number}
    */
    _this.maxDeltaRevision_ = -1;
    /**
    * @private
    * @type {number}
    */
    _this.orientedRevision_ = -1;
    /**
    * @private
    * @type {Array<number>}
    */
    _this.orientedFlatCoordinates_ = null;
    if (opt_layout !== undefined && opt_ends) {
      _this.setFlatCoordinates(opt_layout, /** @type {Array<number>}*/
      coordinates);
      _this.ends_ = opt_ends;
    } else {
      _this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>}*/
      coordinates, opt_layout);
    }
    return _this;
  }
  /**
  * Append the passed linear ring to this polygon.
  * @param {LinearRing} linearRing Linear ring.
  * @api
  */
  Polygon.prototype.appendLinearRing = function (linearRing) {
    if (!this.flatCoordinates) {
      this.flatCoordinates = linearRing.getFlatCoordinates().slice();
    } else {
      _arrayJs.extend(this.flatCoordinates, linearRing.getFlatCoordinates());
    }
    this.ends_.push(this.flatCoordinates.length);
    this.changed();
  };
  /**
  * Make a complete copy of the geometry.
  * @return {!Polygon} Clone.
  * @api
  */
  Polygon.prototype.clone = function () {
    var polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
    polygon.applyProperties(this);
    return polygon;
  };
  /**
  * @param {number} x X.
  * @param {number} y Y.
  * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
  * @param {number} minSquaredDistance Minimum squared distance.
  * @return {number} Minimum squared distance.
  */
  Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
    if (minSquaredDistance < _extentJs.closestSquaredDistanceXY(this.getExtent(), x, y)) {
      return minSquaredDistance;
    }
    if (this.maxDeltaRevision_ != this.getRevision()) {
      this.maxDelta_ = Math.sqrt(_flatClosestJs.arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
      this.maxDeltaRevision_ = this.getRevision();
    }
    return _flatClosestJs.assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
  };
  /**
  * @param {number} x X.
  * @param {number} y Y.
  * @return {boolean} Contains (x, y).
  */
  Polygon.prototype.containsXY = function (x, y) {
    return _flatContainsJs.linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
  };
  /**
  * Return the area of the polygon on projected plane.
  * @return {number} Area (on projected plane).
  * @api
  */
  Polygon.prototype.getArea = function () {
    return _flatAreaJs.linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
  };
  /**
  * Get the coordinate array for this geometry.  This array has the structure
  * of a GeoJSON coordinate array for polygons.
  *
  * @param {boolean=} opt_right Orient coordinates according to the right-hand
  *     rule (counter-clockwise for exterior and clockwise for interior rings).
  *     If `false`, coordinates will be oriented according to the left-hand rule
  *     (clockwise for exterior and counter-clockwise for interior rings).
  *     By default, coordinate orientation will depend on how the geometry was
  *     constructed.
  * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
  * @api
  */
  Polygon.prototype.getCoordinates = function (opt_right) {
    var flatCoordinates;
    if (opt_right !== undefined) {
      flatCoordinates = this.getOrientedFlatCoordinates().slice();
      _flatOrientJs.orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);
    } else {
      flatCoordinates = this.flatCoordinates;
    }
    return _flatInflateJs.inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
  };
  /**
  * @return {Array<number>} Ends.
  */
  Polygon.prototype.getEnds = function () {
    return this.ends_;
  };
  /**
  * @return {Array<number>} Interior point.
  */
  Polygon.prototype.getFlatInteriorPoint = function () {
    if (this.flatInteriorPointRevision_ != this.getRevision()) {
      var flatCenter = _extentJs.getCenter(this.getExtent());
      this.flatInteriorPoint_ = _flatInteriorpointJs.getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
      this.flatInteriorPointRevision_ = this.getRevision();
    }
    return this.flatInteriorPoint_;
  };
  /**
  * Return an interior point of the polygon.
  * @return {Point} Interior point as XYM coordinate, where M is the
  * length of the horizontal intersection that the point belongs to.
  * @api
  */
  Polygon.prototype.getInteriorPoint = function () {
    return new _PointJsDefault.default(this.getFlatInteriorPoint(), _GeometryLayoutJsDefault.default.XYM);
  };
  /**
  * Return the number of rings of the polygon,  this includes the exterior
  * ring and any interior rings.
  *
  * @return {number} Number of rings.
  * @api
  */
  Polygon.prototype.getLinearRingCount = function () {
    return this.ends_.length;
  };
  /**
  * Return the Nth linear ring of the polygon geometry. Return `null` if the
  * given index is out of range.
  * The exterior linear ring is available at index `0` and the interior rings
  * at index `1` and beyond.
  *
  * @param {number} index Index.
  * @return {LinearRing} Linear ring.
  * @api
  */
  Polygon.prototype.getLinearRing = function (index) {
    if (index < 0 || this.ends_.length <= index) {
      return null;
    }
    return new _LinearRingJsDefault.default(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
  };
  /**
  * Return the linear rings of the polygon.
  * @return {Array<LinearRing>} Linear rings.
  * @api
  */
  Polygon.prototype.getLinearRings = function () {
    var layout = this.layout;
    var flatCoordinates = this.flatCoordinates;
    var ends = this.ends_;
    var linearRings = [];
    var offset = 0;
    for (var i = 0, ii = ends.length; i < ii; ++i) {
      var end = ends[i];
      var linearRing = new _LinearRingJsDefault.default(flatCoordinates.slice(offset, end), layout);
      linearRings.push(linearRing);
      offset = end;
    }
    return linearRings;
  };
  /**
  * @return {Array<number>} Oriented flat coordinates.
  */
  Polygon.prototype.getOrientedFlatCoordinates = function () {
    if (this.orientedRevision_ != this.getRevision()) {
      var flatCoordinates = this.flatCoordinates;
      if (_flatOrientJs.linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
        this.orientedFlatCoordinates_ = flatCoordinates;
      } else {
        this.orientedFlatCoordinates_ = flatCoordinates.slice();
        this.orientedFlatCoordinates_.length = _flatOrientJs.orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
      }
      this.orientedRevision_ = this.getRevision();
    }
    return this.orientedFlatCoordinates_;
  };
  /**
  * @param {number} squaredTolerance Squared tolerance.
  * @return {Polygon} Simplified Polygon.
  * @protected
  */
  Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
    var simplifiedFlatCoordinates = [];
    var simplifiedEnds = [];
    simplifiedFlatCoordinates.length = _flatSimplifyJs.quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
    return new Polygon(simplifiedFlatCoordinates, _GeometryLayoutJsDefault.default.XY, simplifiedEnds);
  };
  /**
  * Get the type of this geometry.
  * @return {import("./GeometryType.js").default} Geometry type.
  * @api
  */
  Polygon.prototype.getType = function () {
    return _GeometryTypeJsDefault.default.POLYGON;
  };
  /**
  * Test if the geometry and the passed extent intersect.
  * @param {import("../extent.js").Extent} extent Extent.
  * @return {boolean} `true` if the geometry and the extent intersect.
  * @api
  */
  Polygon.prototype.intersectsExtent = function (extent) {
    return _flatIntersectsextentJs.intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
  };
  /**
  * Set the coordinates of the polygon.
  * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
  * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
  * @api
  */
  Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {
    this.setLayout(opt_layout, coordinates, 2);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    var ends = _flatDeflateJs.deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
    this.changed();
  };
  return Polygon;
})(_SimpleGeometryJsDefault.default);
exports.default = Polygon;
function circular(center, radius, opt_n, opt_sphereRadius) {
  var n = opt_n ? opt_n : 32;
  /** @type {Array<number>}*/
  var flatCoordinates = [];
  for (var i = 0; i < n; ++i) {
    _arrayJs.extend(flatCoordinates, _sphereJs.offset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));
  }
  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
  return new Polygon(flatCoordinates, _GeometryLayoutJsDefault.default.XY, [flatCoordinates.length]);
}
function fromExtent(extent) {
  var minX = extent[0];
  var minY = extent[1];
  var maxX = extent[2];
  var maxY = extent[3];
  var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];
  return new Polygon(flatCoordinates, _GeometryLayoutJsDefault.default.XY, [flatCoordinates.length]);
}
function fromCircle(circle, opt_sides, opt_angle) {
  var sides = opt_sides ? opt_sides : 32;
  var stride = circle.getStride();
  var layout = circle.getLayout();
  var center = circle.getCenter();
  var arrayLength = stride * (sides + 1);
  var flatCoordinates = new Array(arrayLength);
  for (var i = 0; i < arrayLength; i += stride) {
    flatCoordinates[i] = 0;
    flatCoordinates[i + 1] = 0;
    for (var j = 2; j < stride; j++) {
      flatCoordinates[i + j] = center[j];
    }
  }
  var ends = [flatCoordinates.length];
  var polygon = new Polygon(flatCoordinates, layout, ends);
  makeRegular(polygon, center, circle.getRadius(), opt_angle);
  return polygon;
}
function makeRegular(polygon, center, radius, opt_angle) {
  var flatCoordinates = polygon.getFlatCoordinates();
  var stride = polygon.getStride();
  var sides = flatCoordinates.length / stride - 1;
  var startAngle = opt_angle ? opt_angle : 0;
  for (var i = 0; i <= sides; ++i) {
    var offset = i * stride;
    var angle = startAngle + _mathJs.modulo(i, sides) * 2 * Math.PI / sides;
    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);
    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);
  }
  polygon.changed();
}
