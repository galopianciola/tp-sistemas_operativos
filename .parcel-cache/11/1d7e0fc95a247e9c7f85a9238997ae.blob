var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "createExtent", function () {
  return createExtent;
});
_parcelHelpers.export(exports, "none", function () {
  return none;
});
var _mathJs = require('./math.js');
function createExtent(extent, onlyCenter, smooth) {
  return (
    /**
    * @param {import("./coordinate.js").Coordinate|undefined} center Center.
    * @param {number} resolution Resolution.
    * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
    * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
    * @param {Array<number>=} opt_centerShift Shift between map center and viewport center.
    * @return {import("./coordinate.js").Coordinate|undefined} Center.
    */
    function (center, resolution, size, opt_isMoving, opt_centerShift) {
      if (center) {
        var viewWidth = onlyCenter ? 0 : size[0] * resolution;
        var viewHeight = onlyCenter ? 0 : size[1] * resolution;
        var shiftX = opt_centerShift ? opt_centerShift[0] : 0;
        var shiftY = opt_centerShift ? opt_centerShift[1] : 0;
        var minX = extent[0] + viewWidth / 2 + shiftX;
        var maxX = extent[2] - viewWidth / 2 + shiftX;
        var minY = extent[1] + viewHeight / 2 + shiftY;
        var maxY = extent[3] - viewHeight / 2 + shiftY;
        // note: when zooming out of bounds, min and max values for x and y may
        // end up inverted (min > max); this has to be accounted for
        if (minX > maxX) {
          minX = (maxX + minX) / 2;
          maxX = minX;
        }
        if (minY > maxY) {
          minY = (maxY + minY) / 2;
          maxY = minY;
        }
        var x = _mathJs.clamp(center[0], minX, maxX);
        var y = _mathJs.clamp(center[1], minY, maxY);
        var ratio = 30 * resolution;
        // during an interaction, allow some overscroll
        if (opt_isMoving && smooth) {
          x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
          y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
        }
        return [x, y];
      } else {
        return undefined;
      }
    }
  );
}
function none(center) {
  return center;
}
