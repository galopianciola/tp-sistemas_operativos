var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "createCanvasContext2D", function () {
  return createCanvasContext2D;
});
_parcelHelpers.export(exports, "outerWidth", function () {
  return outerWidth;
});
_parcelHelpers.export(exports, "outerHeight", function () {
  return outerHeight;
});
_parcelHelpers.export(exports, "replaceNode", function () {
  return replaceNode;
});
_parcelHelpers.export(exports, "removeNode", function () {
  return removeNode;
});
_parcelHelpers.export(exports, "removeChildren", function () {
  return removeChildren;
});
_parcelHelpers.export(exports, "replaceChildren", function () {
  return replaceChildren;
});
var _hasJs = require('./has.js');
function createCanvasContext2D(opt_width, opt_height, opt_canvasPool) {
  var canvas = opt_canvasPool && opt_canvasPool.length ? opt_canvasPool.shift() : _hasJs.WORKER_OFFSCREEN_CANVAS ? new OffscreenCanvas(opt_width || 300, opt_height || 300) : document.createElement('canvas');
  if (opt_width) {
    canvas.width = opt_width;
  }
  if (opt_height) {
    canvas.height = opt_height;
  }
  // FIXME Allow OffscreenCanvasRenderingContext2D as return type
  return (
    /** @type {CanvasRenderingContext2D}*/
    canvas.getContext('2d')
  );
}
function outerWidth(element) {
  var width = element.offsetWidth;
  var style = getComputedStyle(element);
  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);
  return width;
}
function outerHeight(element) {
  var height = element.offsetHeight;
  var style = getComputedStyle(element);
  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
  return height;
}
function replaceNode(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
}
function removeNode(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
}
function removeChildren(node) {
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
}
function replaceChildren(node, children) {
  var oldChildren = node.childNodes;
  for (var i = 0; true; ++i) {
    var oldChild = oldChildren[i];
    var newChild = children[i];
    // check if our work is done
    if (!oldChild && !newChild) {
      break;
    }
    // check if children match
    if (oldChild === newChild) {
      continue;
    }
    // check if a new child needs to be added
    if (!oldChild) {
      node.appendChild(newChild);
      continue;
    }
    // check if an old child needs to be removed
    if (!newChild) {
      node.removeChild(oldChild);
      --i;
      continue;
    }
    // reorder
    node.insertBefore(newChild, oldChild);
  }
}
