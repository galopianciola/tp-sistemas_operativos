var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "createHitDetectionImageData", function () {
  return createHitDetectionImageData;
});
_parcelHelpers.export(exports, "hitDetect", function () {
  return hitDetect;
});
var _ImmediateJs = require('./Immediate.js');
var _ImmediateJsDefault = _parcelHelpers.interopDefault(_ImmediateJs);
var _geomGeometryTypeJs = require('../../geom/GeometryType.js');
var _geomGeometryTypeJsDefault = _parcelHelpers.interopDefault(_geomGeometryTypeJs);
var _styleIconAnchorUnitsJs = require('../../style/IconAnchorUnits.js');
var _styleIconAnchorUnitsJsDefault = _parcelHelpers.interopDefault(_styleIconAnchorUnitsJs);
var _styleJs = require('../../style.js');
var _domJs = require('../../dom.js');
var _extentJs = require('../../extent.js');
var _arrayJs = require('../../array.js');
function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {
  var width = size[0] / 2;
  var height = size[1] / 2;
  var context = _domJs.createCanvasContext2D(width, height);
  context.imageSmoothingEnabled = false;
  var canvas = context.canvas;
  var renderer = new _ImmediateJsDefault.default(context, 0.5, extent, null, rotation);
  var featureCount = features.length;
  // Stretch hit detection index to use the whole available color range
  var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);
  var featuresByZIndex = {};
  for (var i = 1; i <= featureCount; ++i) {
    var feature = features[i - 1];
    var featureStyleFunction = feature.getStyleFunction() || styleFunction;
    if (!styleFunction) {
      continue;
    }
    var styles = featureStyleFunction(feature, resolution);
    if (!styles) {
      continue;
    }
    if (!Array.isArray(styles)) {
      styles = [styles];
    }
    var index = i * indexFactor;
    var color = '#' + ('000000' + index.toString(16)).slice(-6);
    for (var j = 0, jj = styles.length; j < jj; ++j) {
      var originalStyle = styles[j];
      var style = originalStyle.clone();
      var fill = style.getFill();
      if (fill) {
        fill.setColor(color);
      }
      var stroke = style.getStroke();
      if (stroke) {
        stroke.setColor(color);
      }
      style.setText(undefined);
      var image = originalStyle.getImage();
      if (image) {
        var imgSize = image.getImageSize();
        if (!imgSize) {
          continue;
        }
        var canvas_1 = document.createElement('canvas');
        canvas_1.width = imgSize[0];
        canvas_1.height = imgSize[1];
        var imgContext = canvas_1.getContext('2d', {
          alpha: false
        });
        imgContext.fillStyle = color;
        var img = imgContext.canvas;
        imgContext.fillRect(0, 0, img.width, img.height);
        var width_1 = imgSize ? imgSize[0] : img.width;
        var height_1 = imgSize ? imgSize[1] : img.height;
        var iconContext = _domJs.createCanvasContext2D(width_1, height_1);
        iconContext.drawImage(img, 0, 0);
        style.setImage(new _styleJs.Icon({
          img: img,
          imgSize: imgSize,
          anchor: image.getAnchor(),
          anchorXUnits: _styleIconAnchorUnitsJsDefault.default.PIXELS,
          anchorYUnits: _styleIconAnchorUnitsJsDefault.default.PIXELS,
          offset: image.getOrigin(),
          size: image.getSize(),
          opacity: image.getOpacity(),
          scale: image.getScale(),
          rotation: image.getRotation(),
          rotateWithView: image.getRotateWithView()
        }));
      }
      var zIndex = Number(style.getZIndex());
      var byGeometryType = featuresByZIndex[zIndex];
      if (!byGeometryType) {
        byGeometryType = {};
        featuresByZIndex[zIndex] = byGeometryType;
        byGeometryType[_geomGeometryTypeJsDefault.default.POLYGON] = [];
        byGeometryType[_geomGeometryTypeJsDefault.default.CIRCLE] = [];
        byGeometryType[_geomGeometryTypeJsDefault.default.LINE_STRING] = [];
        byGeometryType[_geomGeometryTypeJsDefault.default.POINT] = [];
      }
      var geometry = style.getGeometryFunction()(feature);
      if (geometry && _extentJs.intersects(extent, geometry.getExtent())) {
        byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);
      }
    }
  }
  var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(_arrayJs.numberSafeCompareFunction);
  for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {
    var byGeometryType = featuresByZIndex[zIndexKeys[i]];
    for (var type in byGeometryType) {
      var geomAndStyle = byGeometryType[type];
      for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {
        renderer.setStyle(geomAndStyle[j + 1]);
        for (var k = 0, kk = transforms.length; k < kk; ++k) {
          renderer.setTransform(transforms[k]);
          renderer.drawGeometry(geomAndStyle[j]);
        }
      }
    }
  }
  return context.getImageData(0, 0, canvas.width, canvas.height);
}
function hitDetect(pixel, features, imageData) {
  var resultFeatures = [];
  if (imageData) {
    var index = (Math.round(pixel[0] / 2) + Math.round(pixel[1] / 2) * imageData.width) * 4;
    var r = imageData.data[index];
    var g = imageData.data[index + 1];
    var b = imageData.data[index + 2];
    var i = b + 256 * (g + 256 * r);
    var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);
    if (i && i % indexFactor === 0) {
      resultFeatures.push(features[i / indexFactor - 1]);
    }
  }
  return resultFeatures;
}
