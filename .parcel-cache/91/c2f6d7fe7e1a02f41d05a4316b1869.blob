var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _MapJs = require('./Map.js');
var _MapJsDefault = _parcelHelpers.interopDefault(_MapJs);
var _ObjectEventTypeJs = require('../ObjectEventType.js');
var _ObjectEventTypeJsDefault = _parcelHelpers.interopDefault(_ObjectEventTypeJs);
var _renderEventJs = require('../render/Event.js');
var _renderEventJsDefault = _parcelHelpers.interopDefault(_renderEventJs);
var _renderEventTypeJs = require('../render/EventType.js');
var _renderEventTypeJsDefault = _parcelHelpers.interopDefault(_renderEventTypeJs);
var _sourceStateJs = require('../source/State.js');
var _sourceStateJsDefault = _parcelHelpers.interopDefault(_sourceStateJs);
var _cssJs = require('../css.js');
var _renderCanvasJs = require('../render/canvas.js');
var _layerLayerJs = require('../layer/Layer.js');
var _eventsJs = require('../events.js');
var _domJs = require('../dom.js');
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
/**
* @classdesc
* Canvas map renderer.
* @api
*/
var CompositeMapRenderer = /** @class*/
(function (_super) {
  __extends(CompositeMapRenderer, _super);
  /**
  * @param {import("../PluggableMap.js").default} map Map.
  */
  function CompositeMapRenderer(map) {
    var _this = _super.call(this, map) || this;
    /**
    * @type {import("../events.js").EventsKey}
    */
    _this.fontChangeListenerKey_ = _eventsJs.listen(_renderCanvasJs.checkedFonts, _ObjectEventTypeJsDefault.default.PROPERTYCHANGE, map.redrawText.bind(map));
    /**
    * @private
    * @type {HTMLDivElement}
    */
    _this.element_ = document.createElement('div');
    var style = _this.element_.style;
    style.position = 'absolute';
    style.width = '100%';
    style.height = '100%';
    style.zIndex = '0';
    _this.element_.className = _cssJs.CLASS_UNSELECTABLE + ' ol-layers';
    var container = map.getViewport();
    container.insertBefore(_this.element_, container.firstChild || null);
    /**
    * @private
    * @type {Array<HTMLElement>}
    */
    _this.children_ = [];
    /**
    * @private
    * @type {boolean}
    */
    _this.renderedVisible_ = true;
    return _this;
  }
  /**
  * @param {import("../render/EventType.js").default} type Event type.
  * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
  */
  CompositeMapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
    var map = this.getMap();
    if (map.hasListener(type)) {
      var event_1 = new _renderEventJsDefault.default(type, undefined, frameState);
      map.dispatchEvent(event_1);
    }
  };
  CompositeMapRenderer.prototype.disposeInternal = function () {
    _eventsJs.unlistenByKey(this.fontChangeListenerKey_);
    this.element_.parentNode.removeChild(this.element_);
    _super.prototype.disposeInternal.call(this);
  };
  /**
  * Render.
  * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
  */
  CompositeMapRenderer.prototype.renderFrame = function (frameState) {
    if (!frameState) {
      if (this.renderedVisible_) {
        this.element_.style.display = 'none';
        this.renderedVisible_ = false;
      }
      return;
    }
    this.calculateMatrices2D(frameState);
    this.dispatchRenderEvent(_renderEventTypeJsDefault.default.PRECOMPOSE, frameState);
    var layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {
      return a.zIndex - b.zIndex;
    });
    var viewState = frameState.viewState;
    this.children_.length = 0;
    /**
    * @type {Array<import("../layer/BaseVector.js").default>}
    */
    var declutterLayers = [];
    var previousElement = null;
    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
      var layerState = layerStatesArray[i];
      frameState.layerIndex = i;
      if (!_layerLayerJs.inView(layerState, viewState) || layerState.sourceState != _sourceStateJsDefault.default.READY && layerState.sourceState != _sourceStateJsDefault.default.UNDEFINED) {
        continue;
      }
      var layer = layerState.layer;
      var element = layer.render(frameState, previousElement);
      if (!element) {
        continue;
      }
      if (element !== previousElement) {
        this.children_.push(element);
        previousElement = element;
      }
      if (('getDeclutter' in layer)) {
        declutterLayers.push(layer);
      }
    }
    for (var i = declutterLayers.length - 1; i >= 0; --i) {
      declutterLayers[i].renderDeclutter(frameState);
    }
    _domJs.replaceChildren(this.element_, this.children_);
    this.dispatchRenderEvent(_renderEventTypeJsDefault.default.POSTCOMPOSE, frameState);
    if (!this.renderedVisible_) {
      this.element_.style.display = '';
      this.renderedVisible_ = true;
    }
    this.scheduleExpireIconCache(frameState);
  };
  /**
  * @param {import("../pixel.js").Pixel} pixel Pixel.
  * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
  * @param {number} hitTolerance Hit tolerance in pixels.
  * @param {function(import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
  *     callback.
  * @param {function(import("../layer/Layer.js").default): boolean} layerFilter Layer filter
  *     function, only layers which are visible and for which this function
  *     returns `true` will be tested for features.  By default, all visible
  *     layers will be tested.
  * @return {T|undefined} Callback result.
  * @template T
  */
  CompositeMapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
    var viewState = frameState.viewState;
    var layerStates = frameState.layerStatesArray;
    var numLayers = layerStates.length;
    for (var i = numLayers - 1; i >= 0; --i) {
      var layerState = layerStates[i];
      var layer = layerState.layer;
      if (layer.hasRenderer() && _layerLayerJs.inView(layerState, viewState) && layerFilter(layer)) {
        var layerRenderer = layer.getRenderer();
        var data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
        if (data) {
          var result = callback(layer, data);
          if (result) {
            return result;
          }
        }
      }
    }
    return undefined;
  };
  return CompositeMapRenderer;
})(_MapJsDefault.default);
exports.default = CompositeMapRenderer;
