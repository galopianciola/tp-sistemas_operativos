var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "RADIUS", function () {
  return RADIUS;
});
_parcelHelpers.export(exports, "HALF_SIZE", function () {
  return HALF_SIZE;
});
_parcelHelpers.export(exports, "EXTENT", function () {
  return EXTENT;
});
_parcelHelpers.export(exports, "WORLD_EXTENT", function () {
  return WORLD_EXTENT;
});
_parcelHelpers.export(exports, "MAX_SAFE_Y", function () {
  return MAX_SAFE_Y;
});
_parcelHelpers.export(exports, "PROJECTIONS", function () {
  return PROJECTIONS;
});
_parcelHelpers.export(exports, "fromEPSG4326", function () {
  return fromEPSG4326;
});
_parcelHelpers.export(exports, "toEPSG4326", function () {
  return toEPSG4326;
});
var _ProjectionJs = require('./Projection.js');
var _ProjectionJsDefault = _parcelHelpers.interopDefault(_ProjectionJs);
var _UnitsJs = require('./Units.js');
var _UnitsJsDefault = _parcelHelpers.interopDefault(_UnitsJs);
var _mathJs = require('../math.js');
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
var RADIUS = 6378137;
var HALF_SIZE = Math.PI * RADIUS;
var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];
var WORLD_EXTENT = [-180, -85, 180, 85];
var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));
/**
* @classdesc
* Projection object for web/spherical Mercator (EPSG:3857).
*/
var EPSG3857Projection = /** @class*/
(function (_super) {
  __extends(EPSG3857Projection, _super);
  /**
  * @param {string} code Code.
  */
  function EPSG3857Projection(code) {
    return _super.call(this, {
      code: code,
      units: _UnitsJsDefault.default.METERS,
      extent: EXTENT,
      global: true,
      worldExtent: WORLD_EXTENT,
      getPointResolution: function (resolution, point) {
        return resolution / _mathJs.cosh(point[1] / RADIUS);
      }
    }) || this;
  }
  return EPSG3857Projection;
})(_ProjectionJsDefault.default);
var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];
function fromEPSG4326(input, opt_output, opt_dimension) {
  var length = input.length;
  var dimension = opt_dimension > 1 ? opt_dimension : 2;
  var output = opt_output;
  if (output === undefined) {
    if (dimension > 2) {
      // preserve values beyond second dimension
      output = input.slice();
    } else {
      output = new Array(length);
    }
  }
  for (var i = 0; i < length; i += dimension) {
    output[i] = HALF_SIZE * input[i] / 180;
    var y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));
    if (y > MAX_SAFE_Y) {
      y = MAX_SAFE_Y;
    } else if (y < -MAX_SAFE_Y) {
      y = -MAX_SAFE_Y;
    }
    output[i + 1] = y;
  }
  return output;
}
function toEPSG4326(input, opt_output, opt_dimension) {
  var length = input.length;
  var dimension = opt_dimension > 1 ? opt_dimension : 2;
  var output = opt_output;
  if (output === undefined) {
    if (dimension > 2) {
      // preserve values beyond second dimension
      output = input.slice();
    } else {
      output = new Array(length);
    }
  }
  for (var i = 0; i < length; i += dimension) {
    output[i] = 180 * input[i] / HALF_SIZE;
    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
  }
  return output;
}
