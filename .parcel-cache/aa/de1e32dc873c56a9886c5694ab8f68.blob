var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _eventsEventJs = require('./events/Event.js');
var _eventsEventJsDefault = _parcelHelpers.interopDefault(_eventsEventJs);
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
/**
* @classdesc
* Events emitted as map events are instances of this type.
* See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
*/
var MapEvent = /** @class*/
(function (_super) {
  __extends(MapEvent, _super);
  /**
  * @param {string} type Event type.
  * @param {import("./PluggableMap.js").default} map Map.
  * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
  */
  function MapEvent(type, map, opt_frameState) {
    var _this = _super.call(this, type) || this;
    /**
    * The map where the event occurred.
    * @type {import("./PluggableMap.js").default}
    * @api
    */
    _this.map = map;
    /**
    * The frame state at the time of the event.
    * @type {?import("./PluggableMap.js").FrameState}
    * @api
    */
    _this.frameState = opt_frameState !== undefined ? opt_frameState : null;
    return _this;
  }
  return MapEvent;
})(_eventsEventJsDefault.default);
exports.default = MapEvent;
