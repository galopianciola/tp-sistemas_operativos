var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "intersectsLineString", function () {
  return intersectsLineString;
});
_parcelHelpers.export(exports, "intersectsLineStringArray", function () {
  return intersectsLineStringArray;
});
_parcelHelpers.export(exports, "intersectsLinearRing", function () {
  return intersectsLinearRing;
});
_parcelHelpers.export(exports, "intersectsLinearRingArray", function () {
  return intersectsLinearRingArray;
});
_parcelHelpers.export(exports, "intersectsLinearRingMultiArray", function () {
  return intersectsLinearRingMultiArray;
});
var _extentJs = require('../../extent.js');
var _segmentsJs = require('./segments.js');
var _containsJs = require('./contains.js');
function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
  var coordinatesExtent = _extentJs.extendFlatCoordinates(_extentJs.createEmpty(), flatCoordinates, offset, end, stride);
  if (!_extentJs.intersects(extent, coordinatesExtent)) {
    return false;
  }
  if (_extentJs.containsExtent(extent, coordinatesExtent)) {
    return true;
  }
  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {
    return true;
  }
  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {
    return true;
  }
  return _segmentsJs.forEach(flatCoordinates, offset, end, stride, /**
  * @param {import("../../coordinate.js").Coordinate} point1 Start point.
  * @param {import("../../coordinate.js").Coordinate} point2 End point.
  * @return {boolean} `true` if the segment and the extent intersect,
  *     `false` otherwise.
  */
  function (point1, point2) {
    return _extentJs.intersectsSegment(extent, point1, point2);
  });
}
function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
  for (var i = 0, ii = ends.length; i < ii; ++i) {
    if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {
      return true;
    }
    offset = ends[i];
  }
  return false;
}
function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
    return true;
  }
  if (_containsJs.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
    return true;
  }
  if (_containsJs.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
    return true;
  }
  if (_containsJs.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
    return true;
  }
  if (_containsJs.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
    return true;
  }
  return false;
}
function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
    return false;
  }
  if (ends.length === 1) {
    return true;
  }
  for (var i = 1, ii = ends.length; i < ii; ++i) {
    if (_containsJs.linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
      if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
        return false;
      }
    }
  }
  return true;
}
function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
  for (var i = 0, ii = endss.length; i < ii; ++i) {
    var ends = endss[i];
    if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {
      return true;
    }
    offset = ends[ends.length - 1];
  }
  return false;
}
