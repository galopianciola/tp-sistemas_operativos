var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "getForProjection", function () {
  return getForProjection;
});
_parcelHelpers.export(exports, "wrapX", function () {
  return wrapX;
});
_parcelHelpers.export(exports, "createForExtent", function () {
  return createForExtent;
});
_parcelHelpers.export(exports, "createXYZ", function () {
  return createXYZ;
});
_parcelHelpers.export(exports, "createForProjection", function () {
  return createForProjection;
});
_parcelHelpers.export(exports, "extentFromProjection", function () {
  return extentFromProjection;
});
var _extentCornerJs = require('./extent/Corner.js');
var _extentCornerJsDefault = _parcelHelpers.interopDefault(_extentCornerJs);
var _tilegridTileGridJs = require('./tilegrid/TileGrid.js');
var _tilegridTileGridJsDefault = _parcelHelpers.interopDefault(_tilegridTileGridJs);
var _projUnitsJs = require('./proj/Units.js');
var _projUnitsJsDefault = _parcelHelpers.interopDefault(_projUnitsJs);
var _tilegridCommonJs = require('./tilegrid/common.js');
var _projJs = require('./proj.js');
var _extentJs = require('./extent.js');
var _sizeJs = require('./size.js');
function getForProjection(projection) {
  var tileGrid = projection.getDefaultTileGrid();
  if (!tileGrid) {
    tileGrid = createForProjection(projection);
    projection.setDefaultTileGrid(tileGrid);
  }
  return tileGrid;
}
function wrapX(tileGrid, tileCoord, projection) {
  var z = tileCoord[0];
  var center = tileGrid.getTileCoordCenter(tileCoord);
  var projectionExtent = extentFromProjection(projection);
  if (!_extentJs.containsCoordinate(projectionExtent, center)) {
    var worldWidth = _extentJs.getWidth(projectionExtent);
    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
    center[0] += worldWidth * worldsAway;
    return tileGrid.getTileCoordForCoordAndZ(center, z);
  } else {
    return tileCoord;
  }
}
function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
  var corner = opt_corner !== undefined ? opt_corner : _extentCornerJsDefault.default.TOP_LEFT;
  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
  return new _tilegridTileGridJsDefault.default({
    extent: extent,
    origin: _extentJs.getCorner(extent, corner),
    resolutions: resolutions,
    tileSize: opt_tileSize
  });
}
function createXYZ(opt_options) {
  var xyzOptions = opt_options || ({});
  var extent = xyzOptions.extent || _projJs.get('EPSG:3857').getExtent();
  var gridOptions = {
    extent: extent,
    minZoom: xyzOptions.minZoom,
    tileSize: xyzOptions.tileSize,
    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)
  };
  return new _tilegridTileGridJsDefault.default(gridOptions);
}
/**
* Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
* @param {import("./extent.js").Extent} extent Extent.
* @param {number=} opt_maxZoom Maximum zoom level (default is
*     DEFAULT_MAX_ZOOM).
* @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
*     DEFAULT_TILE_SIZE).
* @param {number=} opt_maxResolution Resolution at level zero.
* @return {!Array<number>} Resolutions array.
*/
function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {
  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : _tilegridCommonJs.DEFAULT_MAX_ZOOM;
  var height = _extentJs.getHeight(extent);
  var width = _extentJs.getWidth(extent);
  var tileSize = _sizeJs.toSize(opt_tileSize !== undefined ? opt_tileSize : _tilegridCommonJs.DEFAULT_TILE_SIZE);
  var maxResolution = opt_maxResolution > 0 ? opt_maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);
  var length = maxZoom + 1;
  var resolutions = new Array(length);
  for (var z = 0; z < length; ++z) {
    resolutions[z] = maxResolution / Math.pow(2, z);
  }
  return resolutions;
}
function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
  var extent = extentFromProjection(projection);
  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
}
function extentFromProjection(projection) {
  projection = _projJs.get(projection);
  var extent = projection.getExtent();
  if (!extent) {
    var half = 180 * _projJs.METERS_PER_UNIT[_projUnitsJsDefault.default.DEGREES] / projection.getMetersPerUnit();
    extent = _extentJs.createOrUpdate(-half, -half, half, half);
  }
  return extent;
}
