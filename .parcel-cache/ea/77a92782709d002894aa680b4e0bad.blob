var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "disable", function () {
  return disable;
});
_parcelHelpers.export(exports, "none", function () {
  return none;
});
_parcelHelpers.export(exports, "createSnapToN", function () {
  return createSnapToN;
});
_parcelHelpers.export(exports, "createSnapToZero", function () {
  return createSnapToZero;
});
var _mathJs = require('./math.js');
function disable(rotation) {
  if (rotation !== undefined) {
    return 0;
  } else {
    return undefined;
  }
}
function none(rotation) {
  if (rotation !== undefined) {
    return rotation;
  } else {
    return undefined;
  }
}
function createSnapToN(n) {
  var theta = 2 * Math.PI / n;
  return (
    /**
    * @param {number|undefined} rotation Rotation.
    * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
    * @return {number|undefined} Rotation.
    */
    function (rotation, opt_isMoving) {
      if (opt_isMoving) {
        return rotation;
      }
      if (rotation !== undefined) {
        rotation = Math.floor(rotation / theta + 0.5) * theta;
        return rotation;
      } else {
        return undefined;
      }
    }
  );
}
function createSnapToZero(opt_tolerance) {
  var tolerance = opt_tolerance || _mathJs.toRadians(5);
  return (
    /**
    * @param {number|undefined} rotation Rotation.
    * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
    * @return {number|undefined} Rotation.
    */
    function (rotation, opt_isMoving) {
      if (opt_isMoving) {
        return rotation;
      }
      if (rotation !== undefined) {
        if (Math.abs(rotation) <= tolerance) {
          return 0;
        } else {
          return rotation;
        }
      } else {
        return undefined;
      }
    }
  );
}
