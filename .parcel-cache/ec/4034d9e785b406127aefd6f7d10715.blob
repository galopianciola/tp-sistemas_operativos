var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _GeometryLayoutJs = require('./GeometryLayout.js');
var _GeometryLayoutJsDefault = _parcelHelpers.interopDefault(_GeometryLayoutJs);
var _GeometryTypeJs = require('./GeometryType.js');
var _GeometryTypeJsDefault = _parcelHelpers.interopDefault(_GeometryTypeJs);
var _SimpleGeometryJs = require('./SimpleGeometry.js');
var _SimpleGeometryJsDefault = _parcelHelpers.interopDefault(_SimpleGeometryJs);
var _flatClosestJs = require('./flat/closest.js');
var _extentJs = require('../extent.js');
var _flatDeflateJs = require('./flat/deflate.js');
var _flatSimplifyJs = require('./flat/simplify.js');
var _flatInflateJs = require('./flat/inflate.js');
var _flatAreaJs = require('./flat/area.js');
var __extends = undefined && undefined.__extends || (function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || ({
      __proto__: []
    }) instanceof Array && (function (d, b) {
      d.__proto__ = b;
    }) || (function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    });
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
})();
/**
* @classdesc
* Linear ring geometry. Only used as part of polygon; cannot be rendered
* on its own.
*
* @api
*/
var LinearRing = /** @class*/
(function (_super) {
  __extends(LinearRing, _super);
  /**
  * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
  *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
  * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
  */
  function LinearRing(coordinates, opt_layout) {
    var _this = _super.call(this) || this;
    /**
    * @private
    * @type {number}
    */
    _this.maxDelta_ = -1;
    /**
    * @private
    * @type {number}
    */
    _this.maxDeltaRevision_ = -1;
    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
      _this.setFlatCoordinates(opt_layout, /** @type {Array<number>}*/
      coordinates);
    } else {
      _this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>}*/
      coordinates, opt_layout);
    }
    return _this;
  }
  /**
  * Make a complete copy of the geometry.
  * @return {!LinearRing} Clone.
  * @api
  */
  LinearRing.prototype.clone = function () {
    return new LinearRing(this.flatCoordinates.slice(), this.layout);
  };
  /**
  * @param {number} x X.
  * @param {number} y Y.
  * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
  * @param {number} minSquaredDistance Minimum squared distance.
  * @return {number} Minimum squared distance.
  */
  LinearRing.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
    if (minSquaredDistance < _extentJs.closestSquaredDistanceXY(this.getExtent(), x, y)) {
      return minSquaredDistance;
    }
    if (this.maxDeltaRevision_ != this.getRevision()) {
      this.maxDelta_ = Math.sqrt(_flatClosestJs.maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
      this.maxDeltaRevision_ = this.getRevision();
    }
    return _flatClosestJs.assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
  };
  /**
  * Return the area of the linear ring on projected plane.
  * @return {number} Area (on projected plane).
  * @api
  */
  LinearRing.prototype.getArea = function () {
    return _flatAreaJs.linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
  };
  /**
  * Return the coordinates of the linear ring.
  * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
  * @api
  */
  LinearRing.prototype.getCoordinates = function () {
    return _flatInflateJs.inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
  };
  /**
  * @param {number} squaredTolerance Squared tolerance.
  * @return {LinearRing} Simplified LinearRing.
  * @protected
  */
  LinearRing.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
    var simplifiedFlatCoordinates = [];
    simplifiedFlatCoordinates.length = _flatSimplifyJs.douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
    return new LinearRing(simplifiedFlatCoordinates, _GeometryLayoutJsDefault.default.XY);
  };
  /**
  * Get the type of this geometry.
  * @return {import("./GeometryType.js").default} Geometry type.
  * @api
  */
  LinearRing.prototype.getType = function () {
    return _GeometryTypeJsDefault.default.LINEAR_RING;
  };
  /**
  * Test if the geometry and the passed extent intersect.
  * @param {import("../extent.js").Extent} extent Extent.
  * @return {boolean} `true` if the geometry and the extent intersect.
  * @api
  */
  LinearRing.prototype.intersectsExtent = function (extent) {
    return false;
  };
  /**
  * Set the coordinates of the linear ring.
  * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
  * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
  * @api
  */
  LinearRing.prototype.setCoordinates = function (coordinates, opt_layout) {
    this.setLayout(opt_layout, coordinates, 1);
    if (!this.flatCoordinates) {
      this.flatCoordinates = [];
    }
    this.flatCoordinates.length = _flatDeflateJs.deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
    this.changed();
  };
  return LinearRing;
})(_SimpleGeometryJsDefault.default);
exports.default = LinearRing;
