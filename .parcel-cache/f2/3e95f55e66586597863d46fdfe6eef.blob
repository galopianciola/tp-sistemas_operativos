var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "assign", function () {
  return assign;
});
_parcelHelpers.export(exports, "clear", function () {
  return clear;
});
_parcelHelpers.export(exports, "getValues", function () {
  return getValues;
});
_parcelHelpers.export(exports, "isEmpty", function () {
  return isEmpty;
});
var assign = typeof Object.assign === 'function' ? Object.assign : function (target, var_sources) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }
  var output = Object(target);
  for (var i = 1, ii = arguments.length; i < ii; ++i) {
    var source = arguments[i];
    if (source !== undefined && source !== null) {
      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          output[key] = source[key];
        }
      }
    }
  }
  return output;
};
function clear(object) {
  for (var property in object) {
    delete object[property];
  }
}
var getValues = typeof Object.values === 'function' ? Object.values : function (object) {
  var values = [];
  for (var property in object) {
    values.push(object[property]);
  }
  return values;
};
function isEmpty(object) {
  var property;
  for (property in object) {
    return false;
  }
  return !property;
}
